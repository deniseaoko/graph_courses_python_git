## Imports


```{python}
import pandas as pd
import plotly.express as px
```

```{python}
# Temperatures dataset
temperatures = pd.DataFrame(
    {
        "country": ["Sweden", "Denmark", "Norway"],
        "1994": [1, 2, 3],
        "1995": [3, 4, 5],
        "1996": [5, 6, 7],
    }
)

# Fuels Wide dataset
fuels_wide = pd.read_csv(
    "https://raw.githubusercontent.com/the-graph-courses/idap_book/main/data/oil_per_capita_wide.csv"
)

# Eurostat Births Wide dataset
euro_births_wide = pd.read_csv(
    "https://raw.githubusercontent.com/the-graph-courses/idap_book/main/data/euro_births_wide.csv"
)

# Contracts dataset
contracts = pd.read_csv(
    "https://raw.githubusercontent.com/the-graph-courses/idap_book/main/data/chicago_contracts_20_23.csv"
)

# Population dataset
population = pd.read_csv(
    "https://raw.githubusercontent.com/the-graph-courses/idap_book/main/data/tidyr_population.csv"
)
```
## What do wide and long mean

```{python}
temperatures
```
Is this data in a wide or long format?wide

## When to use wide vs long data
wide: Displaying information
long: analysis or plotting

```{python}
fuels_wide
```
```{python}
fuels_wide.melt(id_vars=["Entity","Code"]).sort_values(["Entity","variable"])
```

```{python}
fuels_long = fuels_wide.melt(id_vars=["Entity","Code"],var_name="year",value_name ="oil_consupmtion").sort_values(["Entity","year"])
```

```{python}
fuels_long["year"] = fuels_long["year"].str.replace("y_","").astype (int)
fuels_long
```
## Practice Q: Temperatures to long

```{python}
temperatures
```

```{python}
temperatures_long = temperatures.melt(id_vars=["country"],var_name="year",value_name ="avg_temp")
```

# Practice question
The data is in a wide format. convert it to a long format DataFrame that has the following column names: **"country"**,**"year"**, and **"births_count"**.
Remove the x prefix from the year columns and conver then to integers.

```{python}
euro_births_wide
```

```{python}
euro_births_wide.melt(id_vars=["country"],var_name="year",value_name ="births_count")
```

```{python}
euro_births_wide = euro_births_wide.melt(id_vars=["country"],var_name="year",value_name ="births_count")
```

```{python}
print(euro_births_wide.columns)
```

```{python}
euro_births_wide["year"] = euro_births_wide["year"].str.replace("x","").astype (int)
euro_births_wide
```
## Using Long Data for Analysis


```{python}
fuels_wide
```

Long data easy to extract statistics:

```{python}
fuels_long
```

```{python}
# Average oil consumption per country
fuels_long.groupby("Entity")["oil_consupmtion"].mean()
```

Long data is easier to plot

```{python}
subset = fuels_long.query("Entity in ['Peru','Iran','China']")
subset
```

```{python}
px.line(subset,x="year",y="oil_consupmtion",color = "Entity")
```
## From Long to Wide with pivot()

```{python}
contracts
```

```{python}
# number of contracts per state per year
contracts_summary = contracts.groupby("state")["year"].value_counts().reset_index()
contracts_summary
```

```{python}
contracts_summary.pivot(columns ="year", index = "state",values="count").reset_index()
```

```{python}
contracts_summary.pivot(columns ="state", index = "year",values="count").reset_index()
```

## Practice Q: Temperatures back to Wide
Convert the long 'temperatures_long' dataset you created above back to a wide format. Your answer should have the following column names: **country**,**"1994"**,**"1995"**, and **"1996"**.

```{python}
temperatures_long
```

```{python}
temperature_wide = temperatures_long.pivot(columns =["year"], index = "country",values="avg_temp").reset_index()
temperature_wide
```
## Practice Q 
The 'population' dataset shows the populations of 219 countries over time
Reshape this data into a wide format.

```{python}
population
```

```{python}
print("population").columns()
```

```{python}
population_wide = population.pivot(columns ="year", index = "country",values="population").reset_index()
population_wide
```