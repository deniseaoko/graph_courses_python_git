## Imports

```{python}
import pandas as pd
import numpy as np
import vega_datasets as vd
import plotly.express as px
```
## Intro to repace ()

```{python}
tips =px.data.tips()
tips['day'].value_counts()
```

```{python}
day_mapping ={
    "Sun" : "Sunday",
    "Sat" : "Saturday",
    "Thur" : "Thursday",
    "Fri" : "Friday"
}
tips['day_full'] = tips['day'].replace(day_mapping)
tips
```
```{python}
tips['day'] = tips['day'].replace({
    "Sun" : "Sunday",
    "Sat" : "Saturday",
    "Thur" : "Thursday",
    "Fri" : "Friday"
})

tips
```

```{python}
tips['sex_abbr'] = tips['sex'].replace({
    "Female" : "F",
    "Male" : "M"
})

tips
```
# Handling missing vaues with replace ()

```{python}
movies = vd.data.movies()
movies.to_csv("movies_csv.csv")
movies['Creative_Type'].value_counts(dropna=False)
```

```{python}
# Replacing None values with a string
movies['Creative_Type'] =  movies['Creative_Type'].replace({None: "Unknown/Unclear"})
movies['Creative_Type'].value_counts(dropna=False)

```

```{python}
# Replacing NaN values with a Number
movies['US_DVD_Sales'].tail(10)
movies['US_DVD_Sales'] = movies['US_DVD_Sales'].replace({np.nan : 0})
```
```{python}
movies['US_DVD_Sales'].tail(10)
```

## Practice Q: Standardize MPAA Ratings 

```{python}
movies["MPAA_Rating"] = movies["MPAA_Rating"].replace({
    None : "Unrated",
    "Not Rated" : "Unrated"
})
```

```{python}
movies["MPAA_Rating"].value_counts(dropna=False)
```
689 are unrated

## Categorizing Numeric Data with Custom Functions
Categorize the US_Gross variable
- If the value is less than 10 mil, low
- If the value us between 10 and 50 mil, Medium
- If greater than 50 mil, High

```{python}
def categ_gross (gross) :
    if gross < 10000000:
        return "Low"
    elif gross >= 10000000 and gross <= 50000000:
        return "Medium"
    if gross > 50000000:
        return "High"
    else:
        return None           
```

```{python}
categ_gross_vec = np.vectorize (categ_gross)

categ_gross_vec([500,700])
```

```{python}
movies['gross_category'] = categ_gross_vec(movies['US_Gross'])
movies ['gross_category']
```
# Complex Transformations with Custom Functions

```{python}
def flag_movie(movie_type, us, worldwide):
    if movie_type == "Super Hero" and us == worldwide:
        return "US action movie"
    elif movie_type == "Super Hero" and worldwide > us:
        return "Global action movie"
    else:
        return none    
```

```{python}
flag_movie_vec =np.vectorize(flag_movie)
```

```{python}
flag_movie(movie_type ="Super Hero", us=100,worldwide=200)
flag_movie(movie_type="Super Hero",us=100,worldwide = 100)
```

```{python}
movies["Action_Flag"] = flag_movie_vec(movie_type=movies["Creative_Type"], us=movies["US_Gross"],worldwide=movies["Worldwide_Gross"]
)
```
```{python}
movies["Action_Flag"].value_counts()
```

```{python}
def flag_movie(Rotten_Tomatoes, IMDB_rating):
    if Rotten_Tomatoes > 70 and IMDB_rating < 5:
        return "Critic_friendly"
    elif Rotten_Tomatoes < 50 and IMDB_rating > 7:
        return "Commercial"
    else:
        return "Other" 
```

```{python}
flag_movie_vec =np.vectorize(flag_movie)
```

```{python}
movies
```

```{python}
movies ["movie_count"] = flag_movie_vec(Rotten_Tomatoes =movies["Rotten_Tomatoes_Rating"], IMDB_rating=movies["IMDB_Rating"]
)
```

```{python}
movies["movie_count"].value_counts()
```